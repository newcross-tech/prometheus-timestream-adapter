name: Test and build
on: 
  workflow_dispatch:
  push:

env:
  IMAGE_ECR_NAMESPACE: "newcross"

jobs:
  RunTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup go env
        uses: actions/setup-go@v5.0.0
        with:
          go-version: '1.21'
      - name: Run tests
        run: go test -v ./... -bench=.

  BuildBinaries:
    needs: RunTests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup go env
        uses: actions/setup-go@v5.0.0
        with:
          go-version: '1.21'
      - name: Release new package on tag
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildContainer:
    needs: RunTests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            dpattmann/prometheus-timestream-adapter
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-credentials
        with:
          role-to-assume: ${{ vars.DEV_ASSUME_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ vars.AWS_REGION }}

      # - name: Docker Image
      #   uses: newcross-tech/build-push-image-to-ecr@v2
      #   with:
      #     registry-type: private
      #     aws-account-id: "${{ steps.aws-credentials.outputs.aws-account-id }}"
      #     ecr-repository: "${{ env.IMAGE_ECR_NAMESPACE }}/${{ github.event.repository.name }}"
      #     aws-region: ${{ vars.AWS_REGION }}
      #     #platforms: linux/amd64,linux/arm64
      #     context: ./
      #     file: ./Dockerfile
      #     push-images: ${{ github.ref_name == 'master' || contains(needs.get-commit-message.outputs.message, '[push-image]') }}
      #     scan-images: false
      #     image-tag: ${{ steps.meta.outputs.tags }}
      #     tag-latest: ${{ github.ref_name == 'master' }}

      - name: Amazon ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "${{ steps.aws-credentials.outputs.aws-account-id }}"
          registry-type: "private"

      - name: Set ECR repository name
        shell: bash
        run: |
          echo "ECR_REPOSITORY=${{ env.IMAGE_ECR_NAMESPACE }}/${{ github.event.repository.name }}" >> $GITHUB_ENV
          
      - name: Create ECR Repository
        shell: bash
        run: aws ecr describe-repositories --repository-names ${{env.ECR_REPOSITORY}} --region ${{vars.AWS_REGION}} || aws ecr create-repository --repository-name ${{env.ECR_REPOSITORY}} --region ${{vars.AWS_REGION}}

      - name: Build and Push Image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false

      # - name: Login to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build and push
      #   uses: docker/build-push-action@v4
      #   with:
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}